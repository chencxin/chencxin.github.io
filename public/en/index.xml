<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>athena</title>
    <link>http://athena-book.dns.qihoo.net/en/</link>
    <description>Recent content on athena</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 13 May 2021 09:50:07 +0800</lastBuildDate><atom:link href="http://athena-book.dns.qihoo.net/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Oauto2</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/app/oauto2/</link>
      <pubDate>Wed, 03 Mar 2021 14:51:50 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/app/oauto2/</guid>
      <description>一、是什么 OAuth（开放授权）是一个开放标准（框架），允许用户授权第三方移动应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他们数据的所有内容
用于第三方应用授权登录
二、授权流程  开发者注册 oauth2.0 客户端，或得客户端id和客户端秘钥 应用前端要求用户提供授权信息用来访问用户的数据； 用户被重定向到授权登录服务； 授权登录服务通过后，授权服务将授权后的token,重定向到前端服务； 应用收到token后，通过token请求用户数据，完成验证；  三、授权方式  授权码（authorization-code） 隐藏式（implicit） 密码式（password）： 客户端凭证（client credentials）  1、授权码 授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。
用于前后端分离
2、隐藏式 允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）&amp;ldquo;隐藏式&amp;rdquo;（implicit）
用于单前端应用
3、密码式 如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为&amp;quot;密码式&amp;quot;（password）
4、凭证式 适用于没有前端的命令行应用，即在命令行下请求令牌
三、重要概念 1、 OAuth 2.0 Scope
客户端请求授权中有一个scope字段，用来做Internal access control (RBAC, ACL, etc) 内部访问控制。用来限制此次授权，客户端可以访问的资源。
2、OAuth 2.0 Refresh Tokens
请求参数response_type=code，用于更新token
四、详细 请求授权码：
GET /authorize?response_type=code&amp;amp;client_id=s6BhdRkqt3&amp;amp;state=xyz &amp;amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1 Host: server.example.com  response_type：表示授权类型，必选项，code/ token / password / client_id：表示客户端的ID，必选项 redirect_uri：表示重定向URI，可选项 scope：表示申请的权限范围，可选项 state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。  用授权码获取token：</description>
    </item>
    
    <item>
      <title>虚拟桌面</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/ubuntu/virtual-window/</link>
      <pubDate>Tue, 02 Mar 2021 11:51:05 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/ubuntu/virtual-window/</guid>
      <description>ubuntu20安装虚拟显示器 1、安装软件 sudo apt-get install xserver-xorg-core-hwe-18.04 sudo apt-get install xserver-xorg-video-dummy 2、编写配置文件 sudo vi /usr/share/X11/xorg.conf.d/xorg.conf Section &amp;#34;Monitor&amp;#34; Identifier &amp;#34;Monitor0&amp;#34; HorizSync 28.0-80.0 VertRefresh 48.0-75.0 # https://arachnoid.com/modelines/ # 1920x1080 @ 60.00 Hz (GTF) hsync: 67.08 kHz; pclk: 172.80 MHz Modeline &amp;#34;1920x1080_60.00&amp;#34; 172.80 1920 2040 2248 2576 1080 1081 1084 1118 -HSync +Vsync EndSection Section &amp;#34;Device&amp;#34; Identifier &amp;#34;Card0&amp;#34; Driver &amp;#34;dummy&amp;#34; VideoRam 256000 EndSection Section &amp;#34;Screen&amp;#34; DefaultDepth 24 Identifier &amp;#34;Screen0&amp;#34; Device &amp;#34;Card0&amp;#34; Monitor &amp;#34;Monitor0&amp;#34; SubSection &amp;#34;Display&amp;#34; Depth 24 Modes &amp;#34;1920x1080_60.</description>
    </item>
    
    <item>
      <title>私有镜像仓库</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/cncf/k8s/private-registry/</link>
      <pubDate>Thu, 25 Feb 2021 15:41:28 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/cncf/k8s/private-registry/</guid>
      <description>1、创建 SERVER=hub.dns.360.cn USER=dns EMAIL=yinqiwei@360.cn PW=xxxxxxxx kubectl create secret docker-registry regcred \  --docker-server=$SERVER \  --docker-username=$USER \  --docker-password=$PW \  --docker-email=$EMAIL 或者从文件创建：
kubectl create secret generic regcred --from-file=.dockerconfigjson=/home/yinqiwei/.docker/config.json --type=kubernetes.io/dockerconfigjson 查看：
kubectl get secret regcred --output=yaml 2、应用 添加secret到serviceaccount:
kubectl patch serviceaccount default -p &amp;#39;{&amp;#34;imagePullSecrets&amp;#34;: [{&amp;#34;name&amp;#34;: &amp;#34;regcred&amp;#34;}]}&amp;#39; 添加到默认的sa后整个namespace将默认有拉取权限，pod默认使用sa 是default
针对单个pod也能添加：
apiVersion: v1 kind: Pod metadata: name: private-reg spec: containers: - name: private-reg-container image: &amp;lt;your-private-image&amp;gt; imagePullSecrets: - name: regcred </description>
    </item>
    
    <item>
      <title>项目列表</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/cncf/project-list/</link>
      <pubDate>Wed, 24 Feb 2021 12:04:13 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/cncf/project-list/</guid>
      <description>一、Graduated 毕业项目
1、containerd 项目地址 CNI插件
2、CoreDNS 项目地址 域名解析
3、Envoy 项目地址 网络流量代理，c++实现，高性能 L7 层代理 支持 L3/4 protocol istio依赖envoy代理
4、 etcd 项目地址 k/v 存储
5、Fluentd 项目地址 Fluentd is an open source data collector, which lets you unify the data collection and consumption for a better use and understanding of data
Unified Logging with JSON 基于json的统一日志框架，支持超过125个系统的log信息收集 底层是C和CRuby编写
支持多源日志数据收集，多端日志存储es,kafka,s3,prometheus等
比较： 比logstash 更快，但低于filebeat 插件数量与logstash相当，比filebeat丰富 插件基于lua编写，快速实现，但性能可能不如意 fluentd-bit更快的日志收集，但是插件数量少
6、Harbor 项目地址 镜像仓库
7、Helm 项目地址 安装包管理
8、Jaeger 项目地址 end-to-end distributed tracing Monitor and troubleshoot transactions in complex distributed systems 端到端的分布式追踪系统 复杂系统的监控和和事务处理</description>
    </item>
    
    <item>
      <title>k3s版本安装</title>
      <link>http://athena-book.dns.qihoo.net/en/dns/box/k3s-install/</link>
      <pubDate>Wed, 24 Feb 2021 12:01:30 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/dns/box/k3s-install/</guid>
      <description>k3s盒子产品安装指南 当前本地虚拟机安装测试完成。
1、安装环境依赖 即你执行命令的环境，支持 mac 和 linux 环境。如果你是 windows 系统，请使用虚拟机安装 linux。
软件依赖：
 python3 (sudo apt install python3 python3-pip) docker make sshpass  安装环境需要在公司内网环境，因为需要下载安装镜像！ 确认docker已经启动！
请确保执行 git submodule 命令！
git clone git@w.src.corp.qihoo.net:dns/pandora.git git submodule update --init proto ls proto 查看下 proto 文件是否有内容！
使用下面命令测试：
docker ps make python -c &amp;#34;print(&amp;#39;hello&amp;#39;)&amp;#34; 2、安装步骤 查看命令帮助文档
make 2.1、进入安装环境 make k3s 2.2、 安装 查看当前环境的命令帮助文档
make 初始化参数：
make gen 生成的参数在 inventories/gen/host_vars/&amp;lt;host&amp;gt;.yml 测试请自行修改使用到的镜像。
注意：
 安装分为两种方式： 1、分步安装、2、一步安装；分布安装会逐步安装依赖，一步安装会将所有依赖一起安装；一步安装中间如果报错，修复错误问题后，可使用分步安装从报错步骤开始往后安装。
 一、分步安装</description>
    </item>
    
    <item>
      <title>openid connect</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/app/oidc/</link>
      <pubDate>Thu, 04 Mar 2021 09:46:26 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/app/oidc/</guid>
      <description>一、是什么？ OIDC=(Identity, Authentication) + OAuth 2.0。它在OAuth2上构建了一个身份层，是一个基于OAuth2协议的身份认证标准协议。
解决认证问题。
OIDC在OAuth2的access_token的基础上增加了身份认证信息， 通过公钥私钥配合校验获取身份等其他信息—– 即idToken
二、原理 1、术语：  EU：End User：一个人类用户。 RP：Relying Party ,用来代指OAuth2中的受信任的客户端，身份认证和授权信息的消费方； OP：OpenID Provider，有能力提供EU认证的服务（比如OAuth2中的授权服务），用来为RP提供EU的身份认证信息； ID Token：JWT格式的数据，包含EU身份认证的信息。 UserInfo Endpoint：用户信息接口（受OAuth2保护），当RP使用Access Token访问时，返回授权用户的信息，此接口必须使用HTTPS。 返回EU的Claims。  2、ID Token ID Token是一个安全令牌，是一个授权服务器提供的包含用户信息（由一组Cliams构成以及其他辅助的Cliams）的JWT格式的数据结构。ID Token的主要构成部分如下（使用OAuth2流程的OIDC）
 iss = Issuer Identifier：必须。提供认证信息者的唯一标识。一般是一个https的url（不包含querystring和fragment部分）。 sub = Subject Identifier：必须。iss提供的EU的标识，在iss范围内唯一。它会被RP用来标识唯一的用户。最长为255个ASCII个字符。 aud = Audience(s)：必须。标识ID Token的受众。必须包含OAuth2的client_id。 exp = Expiration time：必须。过期时间，超过此时间的ID Token会作废不再被验证通过。 iat = Issued At Time：必须。JWT的构建的时间。 auth_time = AuthenticationTime：EU完成认证的时间。如果RP发送AuthN请求的时候携带max_age的参数，则此Claim是必须的。 nonce：RP发送请求的时候提供的随机字符串，用来减缓重放攻击，也可以来关联ID Token和RP本身的Session信息。 acr = Authentication Context Class Reference：可选。表示一个认证上下文引用值，可以用来标识认证上下文类。 amr = Authentication Methods References：可选。表示一组认证方法。 azp = Authorized party：可选。结合aud使用。只有在被认证的一方和受众（aud）不一致时才使用此值，一般情况下很少使用。  3、认证方式 因为OIDC基于OAuth2，所以OIDC的认证流程主要是由OAuth2的几种授权流程延伸而来的，有以下3种：</description>
    </item>
    
    <item>
      <title>共享桌面</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/ubuntu/share-screen/</link>
      <pubDate>Tue, 02 Mar 2021 11:58:43 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/ubuntu/share-screen/</guid>
      <description>1、前提  ubuntu 开启 share screen设置 ubuntu 安装虚拟桌面，不然，远程的ubuntu需要连接实际的显示器，远程操作桌面  2、使用 ubuntu端开启：
使用图形桌面，右上角设置 -&amp;gt; share -&amp;gt; share screen 打开即可
虚拟桌面请参考： 虚拟桌面开启方法 只需在 mac 上 快捷栏 cmd + 空格 输入
vnc://&amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; 即可打开远程桌面
一般默认的端口是5900
连接如果报： 版本不兼容的错误，是由于ubuntu开了安全加密，只需在ubuntu端关闭加密即可
gsettings set org.gnome.Vino require-encryption false </description>
    </item>
    
    <item>
      <title>使用</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/cncf/usage/</link>
      <pubDate>Thu, 25 Feb 2021 12:02:55 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/cncf/usage/</guid>
      <description>Lorem Ipsum.</description>
    </item>
    
    <item>
      <title>Hydra</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/app/hydra/</link>
      <pubDate>Thu, 04 Mar 2021 14:55:49 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/app/hydra/</guid>
      <description>一、示例 1、下载代码 git clone https://github.com/ory/hydra.git 2、启动服务： docker-compose -f quickstart.yml \  -f quickstart-postgres.yml \  up --build 端口 4444用于公网，4445用于管理口，一般用于内网，或者配有权限控制的代理
3、测试服务已正确启动 不想测试也可跳过
初始化一个oauth2 client，给的id，secre,和工作类型
docker-compose -f quickstart.yml exec hydra \  hydra clients create \  --endpoint http://127.0.0.1:4445/ \  --id my-client \  --secret secret \  -g client_credentials 测试获取token
docker-compose -f quickstart.yml exec hydra \  hydra token client \  --endpoint http://127.0.0.1:4444/ \  --client-id my-client \  --client-secret secret 测试使用token获取信息，token使用上面命令返回的token</description>
    </item>
    
    <item>
      <title>Dex</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/app/dex/</link>
      <pubDate>Thu, 04 Mar 2021 16:50:29 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/app/dex/</guid>
      <description>1、what? Dex is an identity service that uses OpenID Connect to drive authentication for other apps.
A Federated OpenID Connect Provider
联邦oidc
2、how? 3、use 安装
git clone https://github.com/dexidp/dex.git cd dex/ make 启动服务：
./bin/dex serve examples/config-dev.yaml 配置文件示例：
# DEPRECATED: use config.yaml.dist and config.dev.yaml examples in the repository root. # TODO: keep this until all references are updated. # The base path of dex and the external name of the OpenID Connect service.</description>
    </item>
    
    <item>
      <title>发展</title>
      <link>http://athena-book.dns.qihoo.net/en/dns/box/feature/</link>
      <pubDate>Thu, 13 May 2021 09:50:07 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/dns/box/feature/</guid>
      <description>第一期 构建部署相关 1、私有化集群 建设私有化集群是对外私有化部署解决方案的第一步。
 一键部署 方便扩展 安全的配置 集群管理程序化  2、统一网关（微服务） 目前仅有简单网关
缺失：
 服务访问自动tls 自动代理注入 分布式追踪（应用依赖分析） 故障注入 负载均衡  应用状态可见性和可测试。
2、持久存储 目前缺失
持久存储是有状态服务的基础。 持久化存储为数据库和应用提供高可用的数据服务。
 高可用，高性能，稳定 一键部署  3、监控报警 高可用、覆盖全面的监控系统是建设高可用服务的第一步。
监控可以让我们清晰的看到当前系统的运行状态，监控加报警可以提供紧急状态预警。
缺失：
 应用自身状态数据缺失（希望看到应用的健康状态，请求量，延迟和关键指标数据） 组件状态数据缺失（每个组件的运行状态，请求量，延迟，报错等） 应用链路可见性监控  4、日志 当前没有日志系统！
应用日志目前没有严格要求过，但应用有一个标准。
缺失：
 日志收集，持久存储 日志查询 日志报警（sentry） 日志链路分析 分布式追踪系统  5、构建部署 目前的构建部署自动化属于初级阶段。
缺失：
 k8s作为job, 将任务跑到k8s集群 接入有一定成本，有待优化 应用单元测试覆盖  6、项目迭代优化 完善项目迭代流程，小步快走，快速迭代能力，以功能打造产品而不是版本。
越是复杂的系统，越需要系统间解耦。分开独立的迭代子系统，可以极大的减少系统bug。
7、快速的对外应用部署能力 有了基础设施搭建还需要快速的应用部署能力。
operator sdk 和 kubebuilder
用于为kubernetes crd设置控制器/操作符代码库的两个主要工具。主要都是基于k8s的crd资源，差别不是很大，只有支持的特性多少差别。
应用改用 operator sdk 或 kubebuilder部署，提升应用的稳定性和更细粒度的可控性。</description>
    </item>
    
    <item>
      <title>System Clone</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/system/system-clone/</link>
      <pubDate>Wed, 12 May 2021 16:46:28 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/system/system-clone/</guid>
      <description>克隆恢复系统  Clonezilla（推荐） Mondo Rescue Partimage FSArchiver Partclone G4L doClone Relax-and-Recover（推荐）  Clonezilla Clonezilla
https://clonezilla.org/
Mondo Rescue http://www.mondorescue.org/
Partimage http://www.partimage.org/
 限制1：不能自己克隆自己，也就是说不能克隆一个正在运行的linux，因此，需要将原盘挂到另外一个linux系统上。 限制2：目标分区的尺寸不能小于原分区－例如原分区的大小为15G，虽然可能实际使用的容量不到5G，但还是无法克隆到一个小于15G的分区上。 限制3: 如果备份的分区有MBR，不能使用bzip2压缩格式。  FSArchiver https://www.fsarchiver.org/
Partclone https://partclone.org/
Licensed under GPL, it is available as a tool in Clonezilla as well, you can download it as a package.
G4L g4l = Ghost for Linux
https://sourceforge.net/projects/g4l/
doClone http://doclone.nongnu.org/
Relax-and-Recover https://relax-and-recover.org/
一、Relax-and-Recover使用指南 https://github.com/rear/rear/blob/master/doc/rear.8.adoc
默认变量： /usr/share/rear/conf/default.conf 默认配置文件： /etc/rear/local.conf
redhat文档：
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/part-system_backup_and_recovery
安装 yum install rear genisoimage syslinux 配置 /etc/rear/local.</description>
    </item>
    
    <item>
      <title>鲲鹏</title>
      <link>http://athena-book.dns.qihoo.net/en/dns/box/kunpeng/</link>
      <pubDate>Fri, 16 Apr 2021 10:35:44 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/dns/box/kunpeng/</guid>
      <description>镜像构建： 安装虚拟机： QEMU 运行docker： https://github.com/multiarch/qemu-user-static
node_exporter 手动安装
下载arm64 node_exporter，其它安装配置同x86
k3s 手动安装
安装同x86的rpm包 需要替换k3s和image，
修改启动： k3s.service
改用fannel作为网络插件
应用镜像构建 产出目录： hub.dns.360.cn
安装 需要注意修改 配置文件 中的镜像名；
license初始化修改grafana地址等
clickhouse coredump
https://github.com/ClickHouse/ClickHouse/issues/18121 https://github.com/ClickHouse/ClickHouse/issues/20
最终是由版本： hub.dns.360.cn/library/clickhouse-arm64:20.3.19.4</description>
    </item>
    
    <item>
      <title>x86上运行arm64</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/other/docker-x86-arm64/</link>
      <pubDate>Wed, 14 Apr 2021 11:17:29 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/other/docker-x86-arm64/</guid>
      <description>依赖 安装虚拟机： QEMU 运行docker： https://github.com/multiarch/qemu-user-static
测试 docker run --rm --privileged multiarch/qemu-user-static --reset -p yes docker run --rm -t arm64v8/ubuntu uname -m </description>
    </item>
    
    <item>
      <title>讨论</title>
      <link>http://athena-book.dns.qihoo.net/en/dns/box/chore/</link>
      <pubDate>Wed, 14 Apr 2021 09:34:02 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/dns/box/chore/</guid>
      <description>1、dns产品使用rpm或者ansible安装？ 安装涉及到：
 dns产品的磁盘分区（数据库） 网卡初始化 密码初始化（grafana,coredns） 配置文件文件生成  优缺点：
rpm:
 安装方便，基本无依赖 只能对系统进行简单的初始化操作 定制化较严重，缺少灵活性  ansible:
 安装有依赖 可以定制系统（磁盘，网络等） 可定制化，安装灵活  2、arm64 image 基础镜像：
library/postgres-arm64 library/php-nginx-arm64 library/openjdk-arm64 library/nginx-worker-arm64 library/nginx-arm64 library/kafka-zookeeper-arm64 library/golang-kafka-arm64 library/golang-arm64 library/clickhouse-arm64 library/ubuntu-arm64 library/alpine-arm64 hub.dns.360.cn/library/node-arm64:10.23.3 hub.dns.360.cn/library/clickhouse-arm64:21.1.2.15 hub.dns.360.cn/library/prometheus:v2.20.1 hub.dns.360.cn/library/dashboard-arm64:v2.0.4 hub.dns.360.cn/library/grafana-arm64:7.1.5
业务相关：
hub.dns.360.cn/dns/kafka-zookeeper-arm64:latest hub.dns.360.cn/dns/nginx-worker-arm64:latest hub.dns.360.cn/dns/postgres-arm64:v2.7.4 hub.dns.360.cn/dns/clickhouse-arm64:v2.7.4
hub.dns.360.cn/dns/coredns-box-prepare-arm64:latest hub.dns.360.cn/dns/coredns-box-arm64:v2.7.5 hub.dns.360.cn/dns/grafana-arm64:v2.7.3 hub.dns.360.cn/dns/prometheus-arm64:v2.7.3 hub.dns.360.cn/dns/cron-report-arm64:v2.7.3 hub.dns.360.cn/dns/sms-arm64:v2.7.4
hub.dns.360.cn/dns/qdns/web-box-prepare-arm64:latest hub.dns.360.cn/dns/web-box-arm64:v2.7.4
hub.dns.360.cn/dns/php-build-arm64:latest hub.dns.360.cn/dns/php-box-arm64:v2.7.6
3、容器用户及进程问题  以postgres为例：  [root@localhost ~]# ps -ef | grep postgres UID PID PPID C STIME TTY TIME CMD 70 2094186 2093529 0 4月16 ?</description>
    </item>
    
    <item>
      <title>Comps</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/centos/comps/</link>
      <pubDate>Sun, 11 Apr 2021 21:30:49 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/centos/comps/</guid>
      <description>comps.xml rpm包仓库配置文件
ref:
https://tldp.org/HOWTO/RedHat-CD-HOWTO/comps-file.html https://flylib.com/books/en/1.362.1.42/1/</description>
    </item>
    
    <item>
      <title>Rpmbuild</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/centos/rpmbuild/</link>
      <pubDate>Sun, 11 Apr 2021 20:29:47 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/centos/rpmbuild/</guid>
      <description>准备 sudo yum install rpm-build sudo yum install rpmdevtools new project 默认的_topdir是用户的&amp;lt;home&amp;gt;/rpmbuild目录，所以一般到用户的home目录下创建项目。
当然通过修改_topdir也能到其它目录创建。
# 创建目录 rpmdev-setuptree # or mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS} # 生成 初始spec文件 rpmdev-newspec hello 目录结构：
rpmbuild |_ BUILD |_ BUILDROOT |_ RPMS |_ SOURCES |_ SPECS |_ SRPMS spec 文件 分段  定义段 构建段 安装段   定义  Name Version Release Summary License URL Source0 Patch0 ... 构建  %description %prep %build %install %check %files %changelog 安装  %pre %post %preun %postun Macros 宏定义</description>
    </item>
    
    <item>
      <title>Metallb</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/cncf/metallb/</link>
      <pubDate>Mon, 29 Mar 2021 12:07:33 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/cncf/metallb/</guid>
      <description>基本信息 https://metallb.universe.tf/concepts/
MetalLB hooks into your Kubernetes cluster, and provides a network load-balancer implementation.
安装 1、ipvs模式配置修改：
kubectl edit configmap -n kube-system kube-proxy apiVersion: kubeproxy.config.k8s.io/v1alpha1 kind: KubeProxyConfiguration mode: &amp;#34;ipvs&amp;#34; ipvs: strictARP: true 2、安装
需要文件：
 namespace.yaml metallb.yaml secret.yaml  其中namespace.yaml 和 metallb.yaml可以在github上找到
https://github.com/metallb/metallb/tree/main/manifests
secret.yaml需要自己创建
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.6/manifests/namespace.yaml kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.6/manifests/metallb.yaml # On first install only kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=&amp;#34;$(openssl rand -base64 128)&amp;#34; 注意：
calico 和 matallb中的speaker冲突，修改文件</description>
    </item>
    
    <item>
      <title>Calico bgp</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/cncf/calico-bgp/</link>
      <pubDate>Sun, 28 Mar 2021 21:03:47 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/cncf/calico-bgp/</guid>
      <description>global peer 全局peer将所有的node对接到外部的bgp infra路由，需要infra支持
apiVersion: projectcalico.org/v3 kind: BGPPeer metadata: name: my-global-peer spec: peerIP: 192.20.30.40 asNumber: 64567 Configure a node to act as a route reflector 选择node作为路由反射，将减少集群的路由量，有少量的节点反射其它节点的路由信息；
add cluster id to node
calicoctl patch node my-node -p &amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;bgp&amp;#34;: {&amp;#34;routeReflectorClusterID&amp;#34;: &amp;#34;244.0.0.1&amp;#34;}}}&amp;#39; add label to node
kubectl label node my-node route-reflector=true config peer: 所有节点连接 reflector节点
kind: BGPPeer apiVersion: projectcalico.org/v3 metadata: name: peer-with-route-reflectors spec: nodeSelector: all() peerSelector: route-reflector == &amp;#39;true&amp;#39; globel as change calicoctl patch bgpconfiguration default -p &amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;asNumber&amp;#34;: &amp;#34;64513&amp;#34;}}&amp;#39; node as change calicoctl patch node node-1 -p &amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;bgp&amp;#34;: {&amp;#34;asNumber&amp;#34;: &amp;#34;64514&amp;#34;}}}&amp;#39; Advertise Kubernetes service IP addresses Advertise service cluster IP addresses 外部ip:</description>
    </item>
    
    <item>
      <title>Gns3</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/app/gns3/</link>
      <pubDate>Mon, 22 Mar 2021 16:53:33 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/app/gns3/</guid>
      <description>GNS3 </description>
    </item>
    
    <item>
      <title>海光麒麟机器安装</title>
      <link>http://athena-book.dns.qihoo.net/en/dns/box/haiguang/</link>
      <pubDate>Mon, 22 Mar 2021 14:52:20 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/dns/box/haiguang/</guid>
      <description>1、配置文件参数修改
# 禁用下载检查 pandora_enable_download: false pandora_k3s_disable_manager_nic: true enable_kernel_task: false 需要手动执行磁盘初始化： 分区， 目录挂载
2、机器初始化
下载k3s依赖软件：yum install 需要手动执行
安装k3s需要关闭selinux
setenforce 0 修改文件：
/etc/selinux/config 修改行：
SELINUX=disabled 重启系统
禁用firewalld, 它会扰乱iptables
systemctl stop firewalld systemctl disable firewalld 3、 安装k3s</description>
    </item>
    
    <item>
      <title>Quagga</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/app/quagga/</link>
      <pubDate>Mon, 22 Mar 2021 09:48:25 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/app/quagga/</guid>
      <description>简介 路由器
Quagga软件原名是Zebra是由一个日本开发团队编写的一个以GNU版权方式发布的软件。可以使用Quagga将linux机器打造成一台功能完备的路由器。
特性：
模块化设计：Quagga基于模块化方案的设计，即对每一个路由协议使用单独的守护进程。 运行速度快：因为使用了模块化的设计，使得Quagga的运行速度比一般的路由选择程序要快。 可靠性高：在所有软件模块都失败的情况下，路由器可以继续保持连接并且daemons也会继续运行。故障诊断不必离线的状态下被诊断和更正
组成 Quagga运行时要运行多个守护进程，包括ripd ripngd ospfd ospf6d bgpd 和Zebra。
Zebra守护进程用来更新内核的路由表，其他的守护进程负责进行相应路由选择协议的路由更新。
安装 略
运行 # 帮助 zebra -h # 启动 zebra -d 查看服务端口，可以看到各种协议所对应的接口
cat /etc/service 运行其他守护进程
(ospfd|bgpd|ripd) -d 操作 登陆zebra tty
telnet 127.1 2601 // 默认密码：zebra  登录zebra后就可以使用zebra的命令进行操作。登录其他的守护进程，都是通过它的端口登录的。 也可以直接执行 vtysh 进行配置。 selinux会影响zebra运行，关闭掉 启用IPv4转发功能 do write (保存协议配置命令到conf文件中）  telnet localhost 2601 ...(密码zebra) # 进入特权模式 Router&amp;gt; enable # 输入一个问号，看看Quagga提供了多少路由命令： Router# ? # 察看一下当前的配置 Router# show running-config # 进入全局模式，尽可能把实际可用的配置命令都实验一遍： Router# configure terminal 路由配置 bgp配置：</description>
    </item>
    
    <item>
      <title>Keepalived</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/app/keepalived/</link>
      <pubDate>Fri, 19 Mar 2021 18:40:44 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/app/keepalived/</guid>
      <description>安装
yum install -y keepalived systemctl status keepalived 配置文件：
vim /etc/keepalived/keepalived.conf 机器1 master 配置：
vrrp_instance VI_1 { state MASTER interface eth1 virtual_router_id 51 priority 255 advert_int 1 authentication { auth_type PASS auth_pass 12345 } virtual_ipaddress { 192.168.122.200/24 } } 机器2 backup配置：
vrrp_instance VI_1 { state BACKUP interface eth1 virtual_router_id 51 priority 254 advert_int 1 authentication { auth_type PASS auth_pass 12345 } virtual_ipaddress { 192.168.122.200/24 } } 查看ip状态：
ip -brief address show </description>
    </item>
    
    <item>
      <title>Oauth2</title>
      <link>http://athena-book.dns.qihoo.net/en/dns/project/oauth2/</link>
      <pubDate>Fri, 12 Mar 2021 14:02:56 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/dns/project/oauth2/</guid>
      <description>360接入文档： http://open.app.360.cn/</description>
    </item>
    
    <item>
      <title>Oauth Client示例</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/app/oauth-client-demo/</link>
      <pubDate>Mon, 08 Mar 2021 15:56:44 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/app/oauth-client-demo/</guid>
      <description>一、示例 项目地址 github有公共的oauth登陆接口，只需要申请 git clone git@github.com:ruanyf/node-oauth-demo.git cd node-oauth-demo npm install node index.js 打开地址 http://localhost:8080 </description>
    </item>
    
    <item>
      <title>Go Mod</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/dev/go-mod/</link>
      <pubDate>Thu, 04 Mar 2021 18:17:17 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/dev/go-mod/</guid>
      <description>1、代理设置
go env -w GOPROXY=https://goproxy.cn,direct 取消
go env -w GOPROXY= GOPRIVATE 设置跳过私有库
go env -w GOPRIVATE=*.gitlab.com,*.gitee.com </description>
    </item>
    
    <item>
      <title>Kickstart</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/centos/kickstart/</link>
      <pubDate>Mon, 01 Mar 2021 15:08:45 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/centos/kickstart/</guid>
      <description>是什么？ 使用kickstart,系统管理员可以创建一个文件,这个文件包含了在典型的安装过程中所遇到的问题
控制安装系统的流程和配置
怎么使用？ 详细参考官方文档 centos7 使用说明 kickstart文件的格式
1. 命令段：指明各种安装前配置，如键盘类型等 2. 程序包段：指明要安装的程序包组或程序包，不安装的程序包等 3. 脚本段： + %pre: 安装前脚本 运行环境：运行于安装介质上的微型Linux环境 + %post: 安装后脚本 运行环境：安装完成的系统 命令段中的命令  必备   auth # 认证 bootloader # bootloader位置及配置 keyboard lang part # 分区创建 rootpw # route密码 timezone   可选   install 或 upgrade # 新安装或者更新 text/graphical # 文本安装或者界面安装 network # 网卡设置 firewall # 防火墙配置 selinux poweroff reboot repo user # 为系统创建用户 url # 安装源 key -skip # 跳过安装号  程序段 %packages package #要安装的包 @development #要安装的包组 -byacc #不安装的包 %end 脚本段 安装前脚本</description>
    </item>
    
    <item>
      <title>自定义centos镜像</title>
      <link>http://athena-book.dns.qihoo.net/en/technology/centos/custom-centos-iso/</link>
      <pubDate>Mon, 01 Mar 2021 15:07:50 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/technology/centos/custom-centos-iso/</guid>
      <description>1、下载iso 略
2、 挂载 mkdir -p centos-7 mkdir -p unpack sudo mount &amp;lt;centos iso&amp;gt; centos-7 rsync -Paz centos-7 unpack sudo umount centos-7 3、定制 iso文件都在 unpack文件夹移步进去操作
引导文件： isolinux/isolinux.cfg
添加引导，使用自定义kickstart文件
label 360dns system menu label Install CentOS 7 on S^ystem 360 kernel vmlinuz append initrd=initrd.img inst.stage2=hd:LABEL=AE-CentOS-7 quiet inst.ks=cdrom:/dev/cdrom:/360dns.cfg 定制图标和文字 东西都在 squashfs.img 系统文件里面，需要解压进去 这个liveos是我们安装中使用的系统，将用这个liveos安装实际系统。
# 安装依赖 yum -y install squashfs-tools # pwd: unpacked/LiveOS/ unsquashfs squashfs.img # 解压后生成 cd squashfs-root/LiveOS/ mkdir tmp sudo mount rootfs.</description>
    </item>
    
    <item>
      <title>发展</title>
      <link>http://athena-book.dns.qihoo.net/en/dns/product/future/</link>
      <pubDate>Wed, 24 Feb 2021 14:07:38 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/dns/product/future/</guid>
      <description>内容：  </description>
    </item>
    
    <item>
      <title>监控报警</title>
      <link>http://athena-book.dns.qihoo.net/en/dns/project/monitoring/</link>
      <pubDate>Wed, 24 Feb 2021 12:08:55 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/dns/project/monitoring/</guid>
      <description>Lorem Ipsum.</description>
    </item>
    
    <item>
      <title>本脑安装</title>
      <link>http://athena-book.dns.qihoo.net/en/dns/box/local-brain/</link>
      <pubDate>Wed, 24 Feb 2021 11:41:23 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/dns/box/local-brain/</guid>
      <description>1、机器名不能相同 如果机器名相同，请修改成不同机器名 hostname
2、磁盘创建 为clickhouse创建一个单独的磁盘： 只需要很小即可
lvcreate -L 30G -n clickhouse-hdd VolGroup00 3、配置文件生成及修改 make gen 后生成的配置文件修改：
使用v2.7.3版本
手动修改配置文件： 集群分为master节点和node节点，请分别配置
inventories/gen/hosts
[master] ip1 [node] ip2 [all:children] master node 配置文件复制 目录 inventories/gen/host_vars host1.yml 复制出 host2.yml
更改配置文件参数：
## clickhouse hdd使用磁盘 ## 禁止初始化eth0网络 pandora_local_test: true pandora_k3s_clustered: true 交换kafka和clickhouse的磁盘分区配置
4、安装dns # 初始化机器yum kernel等 make install-machine # 初始化网络 磁盘 make install-prepare-machine # 下载镜像 请确认docker运行中 注意： 若安装机器有网，且镜像源为外网，可跳过这不执行 make install-prepare-image # 安装k3s make install-k3s # 安装 node exporter make install-exporter # 安装 dns应用 make install-dns 5、为dns打上集群化补丁 这一节的所有操作请到master节点上执行；</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>http://athena-book.dns.qihoo.net/en/dns/my-first-post/</link>
      <pubDate>Wed, 24 Feb 2021 10:19:49 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/dns/my-first-post/</guid>
      <description>This is the content of the post. This is the second sentence of the post.
A bunch of code here  </description>
    </item>
    
    <item>
      <title>First</title>
      <link>http://athena-book.dns.qihoo.net/en/about/first/</link>
      <pubDate>Wed, 24 Feb 2021 10:53:31 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/about/first/</guid>
      <description>Insert Lead paragraph here.
New Cool Posts </description>
    </item>
    
    <item>
      <title>First</title>
      <link>http://athena-book.dns.qihoo.net/en/ops/first/</link>
      <pubDate>Wed, 24 Feb 2021 10:21:08 +0800</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/ops/first/</guid>
      <description>This is the content of the post. This is the second sentence of the post.</description>
    </item>
    
    <item>
      <title>Attachments</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/attachments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/attachments/</guid>
      <description>The Attachments shortcode displays a list of files attached to a page.
  Attachments   BachGavotteShort.mp3  (357 kb)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 kb)   adivorciarsetoca00cape.pdf  (361 kb)   hugo.png  (17 kb)   movieselectricsheep-flock-244-32500-2.mp4  (340 kb)    Usage The shortcurt lists files found in a specific folder. Currently, it support two implementations for pages
  If your page is a markdown file, attachements must be placed in a folder named like your page and ending with .</description>
    </item>
    
    <item>
      <title>Attachments (Pièces jointes)</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/attachments.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/attachments.fr/</guid>
      <description>Le shortcode Attachments affiche une liste de pièces jointes d&amp;rsquo;une page.
  Attachments   BachGavotteShort.mp3  (357 kb)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 kb)   adivorciarsetoca00cape.pdf  (361 kb)   hugo.png  (17 kb)   movieselectricsheep-flock-244-32500-2.mp4  (340 kb)    Utilisation Le shortcode affiche la liste de fichiers trouvés dans un dossier spécifique A l&amp;rsquo;heure actuelle, il supporte deux implémentations
  Si votre page est un fichier Markdown, les pièces jointes doivent être placée dans un dossier nommé comme le nom de la page et suffixé par .</description>
    </item>
    
    <item>
      <title>Button</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/button/</guid>
      <description>A button is a just a clickable button with optional icon.
{{% button href=&amp;quot;https://getgrav.org/&amp;quot; %}}Get Grav{{% /button %}} {{% button href=&amp;quot;https://getgrav.org/&amp;quot; icon=&amp;quot;fas fa-download&amp;quot; %}}Get Grav with icon{{% /button %}} {{% button href=&amp;quot;https://getgrav.org/&amp;quot; icon=&amp;quot;fas fa-download&amp;quot; icon-position=&amp;quot;right&amp;quot; %}}Get Grav with icon right{{% /button %}}  Get Grav   Get Grav with icon  Get Grav with icon right   </description>
    </item>
    
    <item>
      <title>Button (Bouton)</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/button.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/button.fr/</guid>
      <description>Le shortcode button est simplement un bouton cliquable avec une icône optionnelle.
{{% button href=&amp;quot;https://getgrav.org/&amp;quot; %}}Téléchargez Grav{{% /button %}} {{% button href=&amp;quot;https://getgrav.org/&amp;quot; icon=&amp;quot;fas fa-download&amp;quot; %}}Téléchargez Grav avec icône{{% /button %}} {{% button href=&amp;quot;https://getgrav.org/&amp;quot; icon=&amp;quot;fas fa-download&amp;quot; icon-position=&amp;quot;right&amp;quot; %}}Téléchargez Grav avec icône à droite{{% /button %}}  Téléchargez Grav   Téléchargez Grav avec icône  Téléchargez Grav avec icône à droite   </description>
    </item>
    
    <item>
      <title>Expand</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/expand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/expand/</guid>
      <description>The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example
  Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description>
    </item>
    
    <item>
      <title>Expand</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/expand.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/expand.fr/</guid>
      <description>Le shortcode Expand affiche une section de texte qui se plie et se déplie. Ci-dessous un exemple.
  Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description>
    </item>
    
    <item>
      <title>Mermaid</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/mermaid/</guid>
      <description>Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.
Just insert your mermaid code in the mermaid shortcode and that&amp;rsquo;s it.
Flowchart example {{&amp;lt;mermaid align=&amp;quot;left&amp;quot;&amp;gt;}} graph LR; A[Hard edge] --&amp;gt;|Link text| B(Round edge) B --&amp;gt; C{Decision} C --&amp;gt;|One| D[Result one] C --&amp;gt;|Two| E[Result two] {{&amp;lt; /mermaid &amp;gt;}}  renders as
graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]  Sequence example {{&amp;lt; mermaid &amp;gt;}} sequenceDiagram participant Alice participant Bob Alice-&amp;gt;&amp;gt;John: Hello John, how are you?</description>
    </item>
    
    <item>
      <title>Mermaid</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/mermaid.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/mermaid.fr/</guid>
      <description>Mermaid est une bibliothèque Javascript qui permet de générer des diagrammes (séquence, état, gantt, etc.) à partir de texte, dans le même style que Markdown.
Insérer votre code Mermaid dans un shortcode mermaid et c&amp;rsquo;est tout.
Flowchart example {{&amp;lt;mermaid align=&amp;quot;left&amp;quot;&amp;gt;}} graph LR; A[Bords droits] --&amp;gt;|Lien texte| B(Bords arondis) B --&amp;gt; C{Décision} C --&amp;gt;|Un| D[Résultat un] C --&amp;gt;|Deux| E[Résultat deux] {{&amp;lt; /mermaid &amp;gt;}}  renders as
graph LR; A[Bords droits] --|Lien texte| B(Bords arondis) B -- C{Décision} C --|Un| D[Résultat un] C --|Deux| E[Résultat deux]  Sequence example {{&amp;lt;mermaid&amp;gt;}} sequenceDiagram participant Alice participant Bob Alice-&amp;gt;&amp;gt;John: Salut John, comment vas-tu?</description>
    </item>
    
    <item>
      <title>Notice</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/notice/</guid>
      <description>The notice shortcode shows 4 types of disclaimers to help you structure your page.
Note {{% notice note %}} A notice disclaimer {{% /notice %}} renders as
A notice disclaimer
 Info {{% notice info %}} An information disclaimer {{% /notice %}} renders as
An information disclaimer
 Tip {{% notice tip %}} A tip disclaimer {{% /notice %}} renders as
A tip disclaimer
 Warning {{% notice warning %}} A warning disclaimer {{% /notice %}} renders as</description>
    </item>
    
    <item>
      <title>Notice</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/notice.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/notice.fr/</guid>
      <description>Le shortcode Notice permet d&amp;rsquo;afficher 4 types de message pour vous aider à structurer votre contenu.
Note {{% notice note %}} Une notice de type *note* {{% /notice %}} s&amp;rsquo;affiche comme
Une notice de type note
 Info {{% notice info %}} Une notice de type *info* {{% /notice %}} s&amp;rsquo;affiche comme
Une notice de type info
 Tip {{% notice tip %}} Une notice de type *tip* {{% /notice %}} s&amp;rsquo;affiche comme</description>
    </item>
    
    <item>
      <title>page test</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/children/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/children/test/</guid>
      <description>This is a test demo child page</description>
    </item>
    
    <item>
      <title>page test</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/children/test.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/children/test.fr/</guid>
      <description>Ceci est une page de demo</description>
    </item>
    
    <item>
      <title>page test 3</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/children/children-2/test3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/children/children-2/test3/</guid>
      <description>This is a test 3 demo child page</description>
    </item>
    
    <item>
      <title>page test 3</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/children/children-2/test3.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/children/children-2/test3.fr/</guid>
      <description>Ceci est une page de demo test 3</description>
    </item>
    
    <item>
      <title>Site param</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/siteparam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/siteparam/</guid>
      <description>siteparam shortcode is used to help you print values of site params.
For instance, in this current site, the editURL variable is used in config.toml
[params] editURL = &amp;#34;https://github.com/matcornic/hugo-theme-learn/edit/master/exampleSite/content/&amp;#34; Use the siteparam shortcode to display its value.
`editURL` Value : {{% siteparam &amp;quot;editURL&amp;quot; %}} is displayed as
editURL Value : https://w.src.corp.qihoo.net/dns/athena-book/tree/master/content/</description>
    </item>
    
    <item>
      <title>Site param</title>
      <link>http://athena-book.dns.qihoo.net/en/example/shortcodes/siteparam.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://athena-book.dns.qihoo.net/en/example/shortcodes/siteparam.fr/</guid>
      <description>Les shortcode siteparam est utilisé pour vous aider à afficher des valeurs provenant des paramètres globaux du site.
Par exemple, dans ce site, le paramètre editURL est utilisé dans le fichier config.toml
[params] editURL = &amp;#34;https://github.com/matcornic/hugo-theme-learn/edit/master/exampleSite/content/&amp;#34; Utilisez le shortcode siteparam pour affichier sa valeur.
Valeur de `editURL` : {{% siteparam &amp;quot;editURL&amp;quot; %}} s&amp;rsquo;affiche comme
Valeur de editURL : https://w.src.corp.qihoo.net/dns/athena-book/tree/master/content/</description>
    </item>
    
  </channel>
</rss>
